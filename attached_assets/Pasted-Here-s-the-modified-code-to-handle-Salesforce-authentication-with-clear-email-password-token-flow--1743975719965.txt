Here's the modified code to handle Salesforce authentication with clear email/password/token flow:

1. Updated Frontend Component (salesforce-credential-connection.tsx):

```tsx
// Inside mutationFn method:
try {
  const res = await fetch('/api/orgs', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    },
    credentials: 'include',
    body: JSON.stringify({
      name: orgName,
      email, // Directly use email field
      password,
      securityToken,
      environment,
      authMethod: "credentials",
      type: environment
    })
  });

  if (!res.ok) {
    const errorData = await res.json();
    throw new Error(errorData.message || 'Failed to connect to Salesforce org');
  }

  setConnectionStatus('success');
  return await res.json();
} catch (error: any) {
  setConnectionStatus('error');
  setConnectionError(error.message || "Failed to connect to Salesforce org");
  throw error;
}
```

2. Updated Server Route Handler (routes.ts):

```typescript
app.post("/api/orgs", ensureAuthenticated, async (req, res) => {
  try {
    const { 
      authMethod, 
      email, // Now using email directly
      password,
      securityToken,
      environment
    } = req.body;

    if (authMethod === 'credentials') {
      if (!email || !password) {
        return res.status(400).send("Email and password are required");
      }

      try {
        const authResult = await salesforceService.authenticateWithCredentials({
          email,
          password,
          securityToken: securityToken || '',
          environment: environment || 'production'
        });

        const orgData = {
          ...req.body,
          userId: req.user!.id,
          instanceUrl: authResult.instanceUrl,
          accessToken: authResult.accessToken,
          refreshToken: authResult.refreshToken || undefined
        };

        const validatedData = insertSalesforceOrgSchema.parse(orgData);
        const org = await storage.createOrg(validatedData);
        res.status(201).json(org);
      } catch (authError) {
        console.error("Authentication error:", authError);
        return res.status(401).send("Salesforce authentication failed: " + authError.message);
      }
    }
  } catch (error) {
    console.error("Org creation error:", error);
    res.status(500).send("Internal server error");
  }
});
```

3. Salesforce Service Update (salesforce.ts):

```typescript
interface SalesforceLoginCredentials {
  email: string;
  password: string;
  securityToken: string;
  environment: 'production' | 'sandbox';
}

async authenticateWithCredentials(credentials: SalesforceLoginCredentials): Promise<{
  accessToken: string;
  instanceUrl: string;
  refreshToken: string | null;
  userId: string;
}> {
  try {
    const conn = new jsforce.Connection({
      loginUrl: credentials.environment === 'sandbox' 
        ? 'https://test.salesforce.com' 
        : 'https://login.salesforce.com'
    });

    // Combine password and security token
    const fullPassword = credentials.password + credentials.securityToken;
    
    await conn.login(credentials.email, fullPassword);

    // Get metadata API access
    const metadata = new jsforce.Metadata(conn);
    
    return {
      accessToken: conn.accessToken || '',
      instanceUrl: conn.instanceUrl || '',
      refreshToken: null,
      userId: conn.userInfo?.id || ''
    };
  } catch (error) {
    console.error("Salesforce authentication error:", error);
    throw new Error("Invalid credentials or connection configuration");
  }
}
```

Key changes made:
1. Unified parameter naming to use `email` throughout the stack
2. Added explicit error handling for missing credentials
3. Improved security token handling by combining with password
4. Prepared for metadata access through JSForce Metadata API
5. Cleaned up redundant error handling
6. Removed unnecessary backward compatibility code

To connect to Salesforce and pull metadata:
1. Enter your Salesforce login email
2. Use your Salesforce password (without security token)
3. Add your Salesforce security token separately
4. Select environment type (production/sandbox)

The system will:
1. Combine password + security token automatically
2. Authenticate with Salesforce
3. Store connection details
4. Provide access to metadata through the JSForce client

Remember to:
1. Enable API access in your Salesforce org
2. Ensure the user has proper permissions
3. Add your Salesforce IP ranges to the allowed list if using restricted access
4. Handle security tokens properly (they reset when password changes)